<?xml version="1.0" encoding="UTF-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>koji_magi::*</title>
<link rel="alternate" href="http://blog.nobers.com/" />
<author>koji_magi</author>
<generator uri="https://github.com/Songmu/p5-Riji" version="0.0.13">Perl Riji</generator>
<id>tag:blog.nobers.com,2013-08-31:</id>
<updated>2014-01-28T01:26:34+09:00</updated>
<entry>
<title type="text">MarvericsにアップデートしたらTitaniumStudioがログインで失敗する</title>
<link href="http://blog.nobers.com/entry/2014-01-28.html" />
<author>
<name>koji--</name>
</author>
<content><![CDATA[<h1>MarvericsにアップデートしたらTitaniumStudioがログインで失敗する</h1>

<p>結論から言うと以下のjavaのアップグレードを適用すればいい。</p>

<p><a href="http://support.apple.com/kb/DL1572" target="blank">http://support.apple.com/kb/DL1572</a></p>

<p>参考リンク：
<a href="https://developer.appcelerator.com/question/156106/mac-mavericks-and-titanium-studio" target="blank">AppceleratorのQA</a></p>
]]></content>
<id>tag:blog.nobers.com,2014-01-28:entry-2014-01-28.html</id>
<published>2014-01-28T26:26:34+0900</published>
<updated>2014-01-28T01:26:34+09:00</updated>
</entry>
<entry>
<title type="text">Hokkaido.pm#11に行ってきました。</title>
<link href="http://blog.nobers.com/entry/2013-12-28-01.html" />
<author>
<name>koji--</name>
</author>
<content><![CDATA[<h1>Hokkaido.pm#11に行ってきました。</h1>

<h2>詳細(ATND)</h2>

<p><a href="http://atnd.org/events/45823">http://atnd.org/events/45823</a></p>

<h2>雑感</h2>

<p>年末進行の合間を縫って、表題のイベントに行ってきました。<br/>
今回は「今年書いたPerlのコード」というテーマだったこともあって<br/>
色々なモジュールの話を聞けました。<br/>
@akiymさんのCocoaAPIを使うモジュールの話と@moznionさんのTestとDocumentを協調させるという考え方が<br/>
個人的にとても興味深い話でした。</p>

<p>あと、@yusukebeさんが海外のカンファレンスではcontextが違ったりして、<br/>
微妙に噛み合わない部分があったりした、という話をされていたのですが、<br/>
以前に、海外の開発者の方が書かれたブログで、カンファレンス（海外のOSC）に参加した感想を目にしたときに、<br/>
やはり似たような話が書かれていたのを思い出しました。<br/>
少し前に国内のOSC関係の方が、登壇者にOSSの開発者が少ないといった話をされていたこともあり<br/>
このcontextの違いは、海外との違いも勿論あると思うのですが、<br/>
カンファレンス毎の文化の違い、みたいなものもあったりするのかな、と考えたりしました。</p>

<h2>末端のエンジニアとして思うところ</h2>

<p>仕事がPerlからPHPになったせいか、Perlコミュニティとの関わり方をどうしたものかと<br/>
最近よく考えるようになったのですが、そんな変化もあってか<br/>
少しずつ客観的に、Hokkaido.pmを眺めるようになってきたのかな、と思っています。</p>

<p>色々思う所はあるのですが、やっぱりPerlコミュニティの文化は凄く好感が持てるので <br/>
エンジニアの仕事を続ける内は、何らかの形で触れていけたら良いなと思いました。<br/>
その上で今回のHokkaido.pmに参加してみて、<br/>
改めてPerlのコミュニティはライブラリ開発者のコミュニティなんだな、と感じました。</p>

<p>年末進行でなかなか時間が取れなかったのですが<br/>
KossyとMonocerosで何か簡単なアプリを作ろうと環境だけは整えていたので<br/>
今日のPMで貰ったモチベーションを利用して<br/>
正月に何か動くものを作ってみようと思いました。</p>
]]></content>
<id>tag:blog.nobers.com,2013-12-29:entry-2013-12-28-01.html</id>
<published>2013-12-29T53:53:59+0900</published>
<updated>2013-12-29T03:59:49+09:00</updated>
</entry>
<entry>
<title type="text">PHPでotfファイルからUnicodeを抽出する</title>
<link href="http://blog.nobers.com/entry/2013-10-19-01.html" />
<author>
<name>koji--</name>
</author>
<content><![CDATA[<h1>PHPでotfファイルからUnicodeを抽出する</h1>

<p><a href="https://github.com/PhenX/php-font-lib">https://github.com/PhenX/php-font-lib</a></p>

<p>こちらのライブラリでいい感じに抽出が出来そうでした。<br/>
ただ、OpenTypeについてある程度理解が無いと厳しそうだったので<br/>
adobeとmicrosoft（とappleのTrueType）のfontのドキュメントも合わせて読んでみました。</p>

<p><a href="http://www.adobe.com/devnet/font.html">http://www.adobe.com/devnet/font.html</a></p>

<p><a href="http://www.microsoft.com/typography/otspec/">http://www.microsoft.com/typography/otspec/</a></p>

<p><a href="https://developer.apple.com/fonts/ttrefman/">https://developer.apple.com/fonts/ttrefman/</a></p>

<p>フォントファイルはいわゆるバイナリなので、フォーマットの中身を調べていけば分かるはずなのですが、<br/>
ドキュメントの解読だけではUnicodeの割り当てまでたどり着けなかったので<br/>
上記のライブラリの実装と見比べて、調査する形になりました。</p>

<p>フォーマット全ては把握しきれませんでしたが、Unicodeの割り当てには<br/>
glyphIndexArrayというattributeが該当するようです。<br/>
glyphIndexArrayについての説明は以下のドキュメントにありました。</p>

<p><a href="https://developer.apple.com/fonts/ttrefman/RM06/Chap6cmap.html">https://developer.apple.com/fonts/ttrefman/RM06/Chap6cmap.html</a></p>

<p>コードとしては、上記ライブラリのwww/font_info.php内でUnicodeの抽出と実体参照による描画をやっている箇所がありました。<br/>
cmapのテーブルからMicrosoft用のUnicode（BMP）に当たるglyphIndexArrayを抽出して<br/>
HTMLで可視化しているようです。<br/>
さきのドキュメントを調べた限りでは、BMP以外も別テーブルにあるようなので<br/>
全てを抽出するには、複数のテーブル（PlatoFormIDとPlatformSpecificIDの組み合わせ）を調べる必要がありそうです。</p>

<h2>おまけ</h2>

<p>OpenTypeについて、ざっくりと説明すると、CIDと呼ばれる独自のIDに文字（字面）を割り当て<br/>
CID毎にUnicodeをマッピングしておくことで、アプリケーションから文字を使用出来るようになっています。<br/>
何故Unicodeそのままではない独自の形なのかと言うと、異体字の扱いが絡んでいるためとのこと。<br/>
（異体字はUnicodeは同じコードが割り当てられるため、文字の出し分けが出来ない）</p>

<p>また、このCIDと字面の割り当て方は、幾つかの仕様があるのですが<br/>
今回、自分が必要になったのはAdobe-Japan1-4という日本語を割り当てるための仕様の一つでした。</p>

<p><a href="http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/font/pdfs/5078.Adobe-Japan1-6.pdf">http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/font/pdfs/5078.Adobe-Japan1-6.pdf</a></p>

<p>だいぶざっくりした調査ですが、メモ書きとして残しておきます。</p>
]]></content>
<id>tag:blog.nobers.com,2013-11-10:entry-2013-10-19-01.html</id>
<published>2013-11-10T32:32:45+0900</published>
<updated>2013-11-10T09:32:45+09:00</updated>
</entry>
<entry>
<title type="text">書評のようなもの ++ 雅なPerl入門</title>
<link href="http://blog.nobers.com/entry/2013-10-14-01.html" />
<author>
<name>koji--</name>
</author>
<content><![CDATA[<h1>書評のようなもの ++ 雅なPerl入門</h1>

<blockquote class="twitter-tweet" data-conversation="none"> <p><a href="https://twitter.com/koji_magi">@koji_magi</a> <a href="https://twitter.com/krocoke">@krocoke</a> 感想なんかも教えて欲しいですね。あんまりフィードバックがないので。冬コミも申し込んでるので、イラスト期待ですね！！</p>&mdash; kaz_hiramatsu (@kaz_hiramatsu) <a href="https://twitter.com/kaz_hiramatsu/statuses/381074315749232640">September 20, 2013</a></blockquote>


<p>ということで、先日の<a href="http://yapcasia.org/2013/" target="_blank">YAPC::Asia</a>にて入手した雅なPerl入門という同人誌の<br/>
感想など記事にしてみようと思います。<br/>
ちなみに中身は健全なPerl学習用の本ですので、<br/>
その点をふまえた上で、興味がある方は先へお進みください。</p>

<h2>表紙</h2>

<p><img src="http://blog.nobers.com/static/img/IMG_20131009_01_01.jpg" alt="表紙絵" /></p>

<p>まごうことなく同人誌ですね。<br/>
即売会という響きも久しく聞いていない身ですが<br/>
これはいいものです。</p>

<p>後から気づいたのですが、知人が表紙絵を書いておりました。<br/>
縁とは意外な所で繋がるものです。</p>

<h2>目次</h2>

<p>本編に入る前に、まずは目次をご覧あれ。</p>

<ul>
<li>第１章　プロローグ</li>
<li>第２章　Perl を知ろう

<ul>
<li>2.1　Perl の特徴</li>
<li>2.2　Perl のスローガン</li>
<li>2.3　CPAN</li>
<li>2.4　コミュニティ</li>
<li>2.5　YAPC</li>
</ul>
</li>
<li>第３章　Perl の開発環境を整えよう

<ul>
<li>3.1　Perl をインストールする</li>
<li>3.2　plenv のインストール</li>
<li>3.3　Perl のバージョンを切り替える</li>
<li>3.4　Hello, world</li>
<li>3.5　プログラムを実行しよう</li>
<li>3.6　Hello, world の解説</li>
<li>3.7　say 関数</li>
<li>3.8　コメント</li>
</ul>
</li>
<li>第４章　スカラー

<ul>
<li>4.1　Perl の基本的なデータ型</li>
<li>4.2　浮動小数点数リテラル</li>
<li>4.3　整数リテラル</li>
<li>4.4　数値用の演算子</li>
<li>4.5　if 文と比較演算子</li>
<li>4.6　ブール値</li>
<li>4.7　unless 文</li>
<li>4.8　if、unless 修飾子</li>
<li>4.9　文字列</li>
<li>4.10　文字列リテラル</li>
<li>4.11　シングルクォート文字列</li>
<li>4.12　ダブルクォート文字列</li>
<li>4.13　文字列のエンコーディング</li>
<li>4.14　文字列演算子</li>
<li>4.15　文字列の比較演算子</li>
<li>4.16　演算子による数値と文字列の自動変換</li>
<li>4.17　論理演算子</li>
<li>4.18　論理演算子を使った初期化</li>
<li>4.19　//演算子</li>
<li>4.20　演算子の優先順位と結合性</li>
</ul>
</li>
<li>第５章　配列とリスト

<ul>
<li>5.1　配列とリストとは</li>
<li>5.2　配列の変数展開</li>
<li>5.3　配列への代入</li>
<li>5.4　リストへの代入</li>
<li>5.5　qw ショートカット</li>
<li>5.6　配列に対する操作</li>
<li>5.7　for 文</li>
<li>5.8　push 関数</li>
<li>5.9　pop 関数</li>
<li>5.10　shift 関数</li>
<li>5.11　unshift 関数</li>
<li>5.12　sort 関数</li>
<li>5.13　reverse 関数</li>
<li>5.14　join 関数</li>
<li>5.15　map 関数</li>
</ul>
</li>
<li>第６章　ハッシュ

<ul>
<li>6.1　ハッシュとは</li>
<li>6.2　ハッシュに対する操作</li>
<li>6.3　keys 関数</li>
<li>6.4　values 関数</li>
<li>6.5　each 関数</li>
<li>6.6　exists 関数</li>
<li>6.7　delete 関数</li>
</ul>
</li>
<li>第７章　サブルーチン

<ul>
<li>7.1　サブルーチンの定義と呼び出し</li>
<li>7.2　サブルーチンの引数</li>
<li>7.3　引数の渡し方</li>
<li>7.4　サブルーチンの戻り値</li>
<li>7.5　サブルーチンとパッケージ</li>
</ul>
</li>
<li>第８章　コンテキスト

<ul>
<li>8.1　演算子とコンテキスト</li>
<li>8.2　スカラーコンテキスト</li>
<li>8.3　リストコンテキスト</li>
</ul>
</li>
<li>第９章　正規表現

<ul>
<li>9.1　正規表現とは</li>
<li>9.2　メタ文字と通常文字</li>
<li>9.3　正規表現の文法</li>
<li>9.4　文字そのものを指定するパターン</li>
<li>9.5　.(ドット)</li>
<li>9.6　[]</li>
<li>9.7　\d と \D</li>
<li>9.8　\w と \W</li>
<li>9.9　量を指定するパターン</li>
<li>9.10　a+</li>
<li>9.11　a*</li>
<li>9.12　a?</li>
<li>9.13　a{m,n}</li>
<li>9.14　よくばりとなまけもの</li>
<li>9.15　位置に関するパターン</li>
<li>9.16　^と$</li>
<li>9.17　\A と \Z</li>
<li>9.18　\z</li>
<li>9.19　特殊な指定に関するパターン</li>
<li>9.20　a|b</li>
<li>9.21　(a)</li>
<li>9.22　a(?:a)</li>
<li>9.23　a(?=b)</li>
<li>9.24　a(?!b)</li>
<li>9.25　a(?&lt;=b)</li>
<li>9.26　s/a/b/</li>
<li>9.27　split 関数</li>
</ul>
</li>
<li>第１０章　リファレンス

<ul>
<li>10.1　リファレンスとは</li>
<li>10.2　リファレンスの生成</li>
<li>10.3　スカラー変数のリファレンス</li>
<li>10.4　配列変数のリファレンス</li>
<li>10.5　モジュールの Data::Dumper の使用について</li>
<li>10.6　ハッシュ変数のリファレンス</li>
<li>10.7　矢印記法</li>
<li>10.8　無名のメモリ領域へのリファレンス</li>
<li>10.9　コードリファレンス</li>
</ul>
</li>
<li>第１１章　CPAN モジュール

<ul>
<li>11.1　CPAN モジュールとは</li>
<li>11.2　cpanm のインストール</li>
<li>11.3　cpanm を使ってモジュールをインストールする</li>
</ul>
</li>
<li>第１２章　オブジェクト指向

<ul>
<li>12.1　オブジェクト指向とは</li>
<li>12.2　1. パッケージを作成する</li>
<li>12.3　2. new メソッドでリファレンスとパッケージ名を bless する</li>
<li>12.4　3. パッケージにメソッドを書く</li>
<li>12.5　4. モジュールをインストールする</li>
<li>12.6　5. new メソッドを呼んでオブジェクトを作成する</li>
<li>12.7　6. オブジェクトに対してメソッドを呼び出す</li>
<li>12.8　継承</li>
<li>12.9　メソッドのオーバーライド</li>
<li>12.10　メソッドのインポートとエクスポート</li>
<li>12.11　use とは</li>
<li>12.12　名前と変数のスコープについて</li>
<li>12.13　カスタムな import メソッド</li>
<li>12.14　File::Slurp</li>
<li>12.15　Encode</li>
<li>12.16　Path::Tiny</li>
</ul>
</li>
<li>おわりに</li>
</ul>


<p>これを見るだけでも、基本を網羅した構成であることは<br/>
十分に伝わると思います。<br/>
自分がPerlを学んだ分厚い参考書と比べても<br/>
ページ数の差はあれど、中身では負けてない、という感想でした。<br/>
このクオリティで同人誌とは…恐るべし。</p>

<h2>技術書としての感想</h2>

<p>まず技術書としての話ですが、<br/>
対象は初学者から言語の基本をある程度おさえた中級者向け、くらいの内容になっていました。<br/>
なので、Perlに興味がある別言語の経験者の方や、<br/>
Perlはある程度触れるかな、くらいの人ならほぼつまずかないで読める内容だと思います。</p>

<p>参考までに、自分はWeb系の実務経験が三年半ほど、恐らく中級者に片足かけたくらいで<br/>
大体の内容は分かりつつ、知らないことも幾つかあった、という感じでした。<br/>
９章の正規表現で出てきた「よくばりとなまけもの」の話は<br/>
初めて知る内容で、とても勉強になりました。</p>

<p>ノートPCを置いといて、つまづいた所が出たらperldocを叩いたり、サンプルコードを打ち込む感じで<br/>
読み進めていきました。</p>

<p>内容は幅広く基礎を扱っているので、どの章も読み応えはありましたが<br/>
特に、環境構築にplenvを使っていた点と、Encodeを取り上げて文字コードの変換に触れている点が<br/>
好印象でした。</p>

<p>個人的には５、６章の組み込み関数はよく使うので<br/>
もう少し実例的なサンプルがあってもいいかな、という気もしました。<br/>
そういえばmap関数はあったのにgrep関数が無かったですね…もしかしてgrepってマイナーなのかな。</p>

<p>あとは、11.3でモジュールを入れる例として「cpanm Moose」していたけど<br/>
もう少しさくっと入るモジュールの方がいいかなと思いました。<br/>
依存が多くて時間かかりますし、何かしらテストこけそうな気が…。<br/>
（あえて茨の道を味わってみるのもアリと言えばアリですが！）</p>

<p>蛇足かと思いましたが、誤植や間違いとおぼしき箇所については<br/>
出来る限りメモしておいたので、本記事の最後にまとめて記しておきます。<br/>
誤植まとめに誤りなどありましたら、コメント頂けると有り難いです。</p>

<h2>ラノベ読みとしての感想</h2>

<p>さて、ここからが本気の出しどころですね。<br/>
著者の<a href="https://twitter.com/kaz_hiramatsu" target="blank">@kaz_hiramatsu</a>ご本人も「ラノベを読む感覚で」と後書きされていますが<br/>
この本は物語仕立てになっています。</p>

<p>Perlを学びたい雅という女の子がクロウというPerlハッカーに教えを乞う、という流れですが<br/>
この二人の対話形式、凄く良いです。</p>

<p>クロウの人物設定は、某hatenaさんあたりにこんな学生さん居そうだなーというリアルさがあるし<br/>
雅は雅で「そんな奴いねえYO！」という部分と「いや、でもこういうことする奴居そうだな…」という<br/>
居なそうで居そう、という良い塩梅を突いたキャラになっていて<br/>
自分は好きな感じでした。</p>

<p>あと、最も興味深かったのが、雅の的確なコメントです。<br/>
この妙に的確コメントが、雅のキャラ設定を膨らませる燃料になっていたように感じました。<br/>
プロローグで人物の説明があったクロウに対し、雅はキャラ設定についてはっきりと書かれている場面はありません。<br/>
しかし、例えば2.2のやりとりを引用してみると</p>

<pre><code>クロウ: （省略）... Perl のプログラムは、同じ事をやる場合でもいろんな書き方が出来るんだ。
雅: いろんな書き方ができると、プログラムが読みにくくなる気がしますけど。
</code></pre>

<p>このコメント、何やら「ん？」と思わされます。<br/>
「読みにくく」ということは、「プログラムは読むもの」という認識があることになります。<br/>
つまり、雅はある程度、プログラムを読む習慣があると推測できます。<br/>
また、「見る」ではなく「読む」という表現からも、プログラムに普段から触れている空気を感じ取る事ができます。</p>

<p>一方、4.3では整数リテラルの説明に対して、このようなコメントを返しています。</p>

<pre><code>雅: 数値もほとんど数学と同じですね。意外とプログラミングって簡単な気がして来ました。
</code></pre>

<p>さもプログラム初心者であるかのようなコメントです。<br/>
雅はプロローグでPerlを知らないと言っているので、一見すると自然に見えますが<br/>
前述のコメントがあるので、まるで初心者を「装っている」ように見えてきます。</p>

<p>この後も、雅のコメントが的確すぎて<br/>
進めば進むほど「もしや正体を隠しているのでは？」という疑問が強くなってくるという<br/>
不思議なモチベーションに押されつつ、サクサクと読み進める事ができました。</p>

<p>うっかりエピローグが用意されていて「実は私はMiyabiではなくMiyagawaだったのさ！」「な、なんだっｔｔ」<br/>
という超展開を妄想したりもしましたが、そんなことには全然なっていなかったので<br/>
<del>残念</del>ほっと一安心でした。</p>

<h2>まとめ</h2>

<p>Perlを学ぶ本としても良い本ですし、ラノベ好きとしても楽しめる一冊でした。 <br/>
Perl好きなら持っておいて、間違いは無いかと。</p>

<p>もし次回があれば中級者向けの本を、と後書きにありましたので<br/>
次の本も手にする機会があれば、是非よんでみたいと思います。</p>

<h2>誤植、間違い等まとめ</h2>

<p>P13. 下方のサンプルコード４行目</p>

<pre><code>誤：小数点以下３桁
正：小数点以下６桁
</code></pre>

<p>P16. ７行目</p>

<pre><code>誤：$x、$y、$x
正：$x、$y、$z
</code></pre>

<p>P19. 表4.1、$x >= $y の意味</p>

<pre><code>誤：$x より$y が大きいか等しい
正：$x は$y より大きいか等しい
</code></pre>

<p>P22. 4.8の三つ目の会話</p>

<pre><code>誤：話者が雅
正：話者がクロウ
</code></pre>

<p>P31. 表4.3、$x ge $y の意味</p>

<pre><code>誤：$x はより$y は大きいか等しい
正：$x は $y より大きいか等しい
</code></pre>

<p>P31. 表4.3、$x le $y の意味</p>

<pre><code>誤：$x より$y は小さいか等しい
正：$x は$y より小さいか等しい
</code></pre>

<p>P32. 一つ目のサンプルコードのコメント</p>

<pre><code>誤："10" + "20"
正："10" . "20"
</code></pre>

<p>P50. 下段のサンプルコード、一行目</p>

<pre><code>誤：//emlist{
正：この行が不要
</code></pre>

<p>P77. 9.14の最後のクロウの台詞</p>

<pre><code>誤：マッチする文字列の中で最も短いもの
正：マッチする文字列の中で最初にマッチしたもの

実際にコードを叩いて確かめてみると、説明とは違って長い方にマッチします
perldoc perlreでは、以下のように説明されています

By default, a quantified subpattern is "greedy", that is, it will match
as many times as possible (given a particular starting location) while
still allowing the rest of the pattern to match.  If you want it to
match the minimum number of times possible, follow the quantifier with
a "?".  Note that the meanings don't change, just the "greediness":

    *?       Match 0 or more times, not greedily
    +?       Match 1 or more times, not greedily
    ??       Match 0 or 1 time, not greedily
    {n}?     Match exactly n times, not greedily (redundant)
    {n,}?    Match at least n times, not greedily
    {n,m}?    Match at least n but not more than m times, not greedily
</code></pre>

<p>P81. 表9.5、メタ文字の(?:b)</p>

<pre><code>誤：(?:b)
正：(?:a)
   「意味」の項目が「パターンaのグループ化」になっていたので、表の流れから考えて、
   「意味」ではなく「メタ文字」の項目を直す形にしています
</code></pre>

<p>P84. 9.25項目全体</p>

<pre><code>ここは恐らく(?&lt;=)の説明として、9.25の中身自体が適切ではないです
perldoc perlreから、(?&lt;=)の説明を一部抜粋します

"(?&lt;=pattern)" "\K"
    A zero-width positive look-behind assertion.  For example,
    "/(?&lt;=\t)\w+/" matches a word that follows a tab, without
    including the tab in $&amp;.  Works only for fixed-width look-
    behind.

ざっくり訳すと、「タブ文字列(\t)に文字列が一文字以上繋がってる場合にマッチするけど、  
$&amp;（マッチした文字列が入る変数）にタブは含まないよ」となります
こんな感じのワンライナーを書くと、実際に動きが確認出来ます

$ perl -E 'if ("\taaa" =~ /(?&lt;=\t)\w+/) { say $&amp; }'
aaa
</code></pre>

<p>P115. サンプルコード、new関数の下から二行目のコメント</p>

<pre><code>誤：空のハッシュリファレンスを用意
正：空じゃない
</code></pre>
]]></content>
<id>tag:blog.nobers.com,2013-10-14:entry-2013-10-14-01.html</id>
<published>2013-10-14T27:27:23+0900</published>
<updated>2013-10-14T19:01:25+09:00</updated>
</entry>
<entry>
<title type="text">githubのPagesにtweetボタンを設置したらurlが動かなかった</title>
<link href="http://blog.nobers.com/entry/2013-10-03-01.html" />
<author>
<name>koji--</name>
</author>
<content><![CDATA[<h1>githubのPagesにtweetボタンを設置したらurlが動かなかった</h1>

<pre><code>&lt;a href="https://twitter.com/share" class="twitter-share-button"&gt;Tweet&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');&lt;/script&gt;
</code></pre>

<p>こんな感じでtweetボタンを設置できるけど、投稿文にurlが付与されない。<br/>
aタグにdata-urlで指定してもダメだった。<br/>
ローカルで動かしてみて、適当なドメインをhostsで指定したり<br/>
IP直接指定だとurlが付与されるので、github.ioの仕様なのかも。</p>

<p>2013-10-14追記:</p>

<p><a href="http://hachiojipm.github.io/" target="blank">Hachioji.pmの日めくりテックトーク</a>を見たら全然そんなことは無かったので<br/>
githubで使ってるkoji--というサブドメインが悪いんじゃないか説。<br/>
確かハイフンと.を並べる文字列をドメインにしちゃアカン、みたいなのをどこかで見たような…</p>
]]></content>
<id>tag:blog.nobers.com,2013-10-03:entry-2013-10-03-01.html</id>
<published>2013-10-03T18:18:52+0900</published>
<updated>2013-10-14T18:44:59+09:00</updated>
</entry>
<entry>
<title type="text">一通りブログのデザインをいじってみた</title>
<link href="http://blog.nobers.com/entry/2013-09-26-01.html" />
<author>
<name>koji--</name>
</author>
<content><![CDATA[<h1>一通りブログのデザインをいじってみた</h1>

<p>あまりクドいデザインに出来るほど<br/>
デザイン脳があるわけではないので<br/>
ドットのボーダーとシンプルな色使いで<br/>
まとめてみました。</p>

<p>もう少し改良の余地はありますが<br/>
ひとまずこれでやってみようかなと思います。</p>
]]></content>
<id>tag:blog.nobers.com,2013-09-26:entry-2013-09-26-01.html</id>
<published>2013-09-26T34:34:21+0900</published>
<updated>2013-10-09T00:54:31+09:00</updated>
</entry>
<entry>
<title type="text">Riji触りつつデザインをいじってみている</title>
<link href="http://blog.nobers.com/entry/2013-09-15.html" />
<author>
<name>koji--</name>
</author>
<content><![CDATA[<h1>Riji触りつつデザインをいじってみている</h1>

<p>ぼちぼちブログのデザインラフを作ったので<br/>
HTMLのコーディングをはじめてみたりしています。</p>

<p>デザインを考える作業はプログラムを書く作業とは<br/>
よく似ているけど考えることはやっぱり違っていて<br/>
とても興味深い作業です。</p>

<p>しばらくはRijiとキャッキャウフフしながら<br/>
ああでもないこうでもないと<br/>
デザインをいじってみようかなと思います。</p>
]]></content>
<id>tag:blog.nobers.com,2013-09-15:entry-2013-09-15.html</id>
<published>2013-09-15T09:09:44+0900</published>
<updated>2013-10-09T00:54:31+09:00</updated>
</entry>
</feed>
